<?xml version="1.0"?>
<!DOCTYPE mycat:schema SYSTEM "schema.dtd">
<mycat:schema xmlns:mycat="http://io.mycat/">
	<!--逻辑库，跟数据库的database的概念相同-->
	<!--schema上面的dataNode是逻辑库下面的表的默认数据节点
		sqlMaxLimit:效果类似于sql语句里面加上limit，不过如果schema为非分片库则该属性不生效
	-->
	<schema name="enjoyDB" checkSQLschema="true" dataNode="dn140">
		<!--mycat中的逻辑表-->
		<!--
		name:逻辑表的名称，名称必须唯一
		dataNode:值必须跟dataNode标签中的name对应，如果值过多可以用 dataNode="dn$0-99,cn$100-199"
		rule:分片规则配置，定义在rule.xml中，必须与tableRule中的name对应
		ruleRequired:该属性用于指定表是否绑定分片规则，如果配置为true，但没有配置具体rule的话 ，程序会报错
		primaryKey：该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就会发送查询语句到所有配置的DN上，如果使用该属性配置真实表的主键。难么MyCat会缓存主键与具体DN的信息，那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句给具体的DN，但是尽管配置该属性，如果缓存并没有命中的话，还是会发送语句给具体的DN，来获得数据
		type：全局表：global  每一个dn都会保存一份全局表，普通表：不指定该值为globla的所有表
		autoIncrement:autoIncrement=“true”,默认是禁用的
		needAddLimit：默认是true
		-->
		<table name="t_order" dataNode="dn140,dn141"  primaryKey="orderId" rule="jch">
<!--			<childTable name="t_order_detail" primaryKey="orderDetailId" joinKey="orderId" parentKey="orderId"/>-->
		</table>

		<table name="t_order_detail" dataNode="dn140,dn141" primaryKey="orderDetailId" rule="jch1"/>
<!--		<table name="mycat_sequence" dataNode="localdn" primaryKey="name"/>-->
		<table name="t_order_type" primaryKey="orderType" dataNode="dn140,dn141" type="global"/>

		<table name="zg_goods" dataNode="localdn" primaryKey="goodCode"/>
	</schema>

	<!-- <dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743"
		/> -->

	<dataNode name="dn140" dataHost="host140" database="consult" />
	<dataNode name="dn141" dataHost="host141" database="consult" />
	<dataNode name="localdn" dataHost="localhost1" database="consult" />
	<!--
	maxCon:指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数
	minCon:指定每个读写实例连接池的最小连接，初始化连接池的大小
	balance:
1. balance="0", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。
2. balance="1"，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1->S1，M2->S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。
3. balance="2"，所有读操作都随机的在writeHost、readhost上分发。
4. balance="3"，所有读请求随机的分发到writeHost对应的readhost执行，writerHost不负担读压力，注意balance=3只在1.4及其以后版本有，1.3没有。
	writeType:
	负载均衡类型，目前的取值有3种：
1. writeType="0", 所有写操作发送到配置的第一个writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .
2. writeType="1"，所有写操作都随机的发送到配置的writeHost。
3. writeType="2"，没实现
	switchType:
  -1 表示不自动切换
   1 默认值，自动切换
   2 基于MySQL主从同步的状态决定是否切换
      心跳语句为 show slave status
   3 基于MySQL galary cluster的切换机制（适合集群）（1.4.1）
      心跳语句为 show status like ‘wsrep%’
	-->
	<dataHost name="host140" maxCon="1000" minCon="10" balance="0"
			  writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
		<!--heartbeat标签
		MYSQL可以使用select user()
		Oracle可以使用select 1 from dual
		-->
		<heartbeat>select user()</heartbeat>
		<connectionInitSql></connectionInitSql>
		<!-- can have multi write hosts -->
		<!--
		如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去
		-->
		<writeHost host="hostM1" url="192.168.67.140:3400" user="root"
				   password="123456">
			<readHost host="hostM2" url="192.168.67.140:3401" password="123456" user="root"/>
		</writeHost>
	</dataHost>
	<dataHost name="host141" maxCon="1000" minCon="10" balance="0"
			  writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
		<!--heartbeat标签
		MYSQL可以使用select user()
		Oracle可以使用select 1 from dual
		-->
		<heartbeat>select user()</heartbeat>
		<connectionInitSql></connectionInitSql>
		<!-- can have multi write hosts -->
		<!--
		如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去
		-->
		<writeHost host="hostM1" url="192.168.67.141:3400" user="root"
				   password="123456">
			<readHost host="hostM2" url="192.168.67.141:3401" password="123456" user="root"/>
		</writeHost>
	</dataHost>
	<dataHost name="localhost1" maxCon="1000" minCon="10" balance="0"
			  writeType="0" dbType="mysql" dbDriver="jdbc" switchType="1"  slaveThreshold="100">
		<heartbeat>select user()</heartbeat>
		<!-- can have multi write hosts -->
		<writeHost host="hostM1" url="jdbc:mysql://localhost:3306" user="root"
				   password="123456">
		</writeHost>
	</dataHost>
</mycat:schema>